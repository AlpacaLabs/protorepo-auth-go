// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alpacalabs/auth/v1/session.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// An auth session.
type Session struct {
	// the session's globally unique ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the session's secret.
	// if one secret gets compromised, it only compromises this one session
	// and not all sessions in the database. great security feature to have!
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	// the device type (e.g., quest, PDL, browser).
	// TODO should this be an enum?
	DeviceType string `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// device's unique id
	// Quest makes this easy for us, but on PDL (desktop) it's harder.
	// MAC address is insufficient, b/c the network card can just be replaced.
	// TODO discuss device_id on desktop further
	DeviceId string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// the account (e.g., user, workstation, guest) to which this session belongs.
	AccountId            string   `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_9c03b0f379635ac9, []int{0}
}

func (m *Session) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Session.Unmarshal(m, b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Session.Marshal(b, m, deterministic)
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return xxx_messageInfo_Session.Size(m)
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Session) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Session) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *Session) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Session) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func init() {
	proto.RegisterType((*Session)(nil), "alpacalabs.auth.v1.Session")
}

func init() { proto.RegisterFile("alpacalabs/auth/v1/session.proto", fileDescriptor_9c03b0f379635ac9) }

var fileDescriptor_9c03b0f379635ac9 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0xcc, 0x29, 0x48,
	0x4c, 0x4e, 0xcc, 0x49, 0x4c, 0x2a, 0xd6, 0x4f, 0x2c, 0x2d, 0xc9, 0xd0, 0x2f, 0x33, 0xd4, 0x2f,
	0x4e, 0x2d, 0x2e, 0xce, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x42, 0xa8,
	0xd0, 0x03, 0xa9, 0xd0, 0x2b, 0x33, 0x54, 0xea, 0x63, 0xe4, 0x62, 0x0f, 0x86, 0xa8, 0x12, 0xe2,
	0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62, 0xca, 0x4c, 0x11, 0x12,
	0xe3, 0x62, 0x2b, 0x4e, 0x4d, 0x2e, 0x4a, 0x2d, 0x91, 0x60, 0x02, 0x8b, 0x41, 0x79, 0x42, 0xf2,
	0x5c, 0xdc, 0x29, 0xa9, 0x65, 0x99, 0xc9, 0xa9, 0xf1, 0x25, 0x95, 0x05, 0xa9, 0x12, 0xcc, 0x60,
	0x49, 0x2e, 0x88, 0x50, 0x48, 0x65, 0x41, 0xaa, 0x90, 0x34, 0x17, 0x27, 0x54, 0x41, 0x66, 0x8a,
	0x04, 0x0b, 0x58, 0x9a, 0x03, 0x22, 0xe0, 0x99, 0x22, 0x24, 0xcb, 0xc5, 0x95, 0x98, 0x9c, 0x9c,
	0x5f, 0x9a, 0x57, 0x02, 0x92, 0x65, 0x05, 0xcb, 0x72, 0x42, 0x45, 0x3c, 0x53, 0x9c, 0x26, 0x32,
	0x72, 0x89, 0x25, 0xe7, 0xe7, 0xea, 0x61, 0xba, 0xd5, 0x89, 0xd3, 0xb1, 0xb4, 0x24, 0x23, 0x00,
	0xe4, 0x95, 0x00, 0xc6, 0x28, 0xab, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c,
	0x7d, 0x47, 0xb0, 0x5a, 0x1f, 0x90, 0xcf, 0xc1, 0x3e, 0x2d, 0x4a, 0x2d, 0xc8, 0xd7, 0x05, 0xe9,
	0xd2, 0x4d, 0xcf, 0xd7, 0xc7, 0x0c, 0x96, 0x45, 0x4c, 0xcc, 0x8e, 0x3e, 0x8e, 0xab, 0x98, 0x84,
	0x10, 0xfa, 0xf4, 0x40, 0x46, 0xeb, 0x85, 0x19, 0x9e, 0x42, 0x16, 0x8c, 0x01, 0x09, 0xc6, 0x84,
	0x19, 0x26, 0xb1, 0x81, 0x4d, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x91, 0x29, 0x87,
	0x63, 0x01, 0x00, 0x00,
}
